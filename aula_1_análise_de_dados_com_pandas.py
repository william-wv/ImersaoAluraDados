# -*- coding: utf-8 -*-
"""Aula 1 - Análise de Dados com Pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1srXiNB7rTm-4wH7nXbhC5cKuVstdqZ-7
"""

print('Vou aprender python para dados');
idade = 21;
nome = "William"
print("Meu nome é " , nome , " tenho " , idade , " anos");

import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/guilhermeonrails/data-jobs/refs/heads/main/salaries.csv")

df.head(10)

df.info()

df.describe()

df.shape

linhas, colunas = df.shape[0] , df.shape[1]

print('linhas' , linhas)
print('colunas' , colunas)

df.columns



df.rename(columns={
    'ano_trabalho': 'ano',
    'nivel_experiencia': 'senioridade',
    'tipo_emprego': 'contrato',
    'cargo': 'cargo',
    'salario': 'salario',
    'moeda_salario': 'moeda',
    'salario_em_usd': 'usd',
    'residencia_empregado': 'residencia',
    'taxa_remoto': 'remoto',
    'localizacao_empresa': 'empresa',
    'tamanho_empresa': 'tamanho_empresa'
}, inplace=True)

display(df.head())

df.columns

df['nivel_experiencia'].value_counts()

df['contrato'].value_counts()

df['remoto'].value_counts()

"""0 = presencial
100 =
50 =
"""

df['tamanho_empresa'].value_counts()

senioridade_map = {
    'SE': 'Senior',
    'MI': 'Pleno',
    'EN': 'Junior',
    'EX': 'Executivo'
}

df['senioridade'] = df['senioridade'].map(senioridade_map)

df['senioridade'].value_counts()

contrato_map = {
    'FT': 'Tempo Integral',
    'CT': 'Contrato',
    'PT': 'Tempo Parcial',
    'FL': 'Freelancer'
}

df['contrato'] = df['contrato'].map(contrato_map)

df['contrato'].value_counts()

tamanho_empresa_map = {
    'M': 'Médio',
    'L': 'Grande',
    'S': 'Pequeno'
}

df['tamanho_empresa'] = df['tamanho_empresa'].map(tamanho_empresa_map)

df['tamanho_empresa'].value_counts()

remoto_map = {
    0: 'Presencial',
    50: 'Híbrido',
    100: 'Remoto'
}

df['remoto'] = df['remoto'].map(remoto_map)

df['remoto'].value_counts()



import pandas as pd

# Reload the original dataset
df = pd.read_csv("https://raw.githubusercontent.com/guilhermeonrails/data-jobs/refs/heads/main/salaries.csv")

# Display the head of the dataframe to confirm
display(df.head())

# Display info to check the 'remoto' column and other dtypes
display(df.info())

"""# Task
Traduza todas as colunas e as categorias das colunas 'senioridade', 'contrato', 'tamanho_empresa' e 'remoto' do dataframe para português.

## Renomear colunas

### Subtask:
Traduzir os nomes das colunas do DataFrame para português.

**Reasoning**:
Create a dictionary to map the English column names to Portuguese and then use the rename method to apply the changes to the dataframe. Finally, display the head of the dataframe to verify the changes.
"""

column_mapping = {
    'work_year': 'ano_trabalho',
    'experience_level': 'nivel_experiencia',
    'employment_type': 'tipo_emprego',
    'job_title': 'cargo',
    'salary': 'salario',
    'salary_currency': 'moeda_salario',
    'salary_in_usd': 'salario_em_usd',
    'employee_residence': 'residencia_empregado',
    'remote_ratio': 'taxa_remoto',
    'company_location': 'localizacao_empresa',
    'company_size': 'tamanho_empresa'
}

df.rename(columns=column_mapping, inplace=True)

display(df.head())

"""## Traduzir categorias de 'senioridade'

### Subtask:
Mapear as abreviações da coluna 'senioridade' para os termos em português (Senior, Pleno, Junior, Executivo).

**Reasoning**:
Create a dictionary to map the experience level abbreviations to Portuguese terms and apply the mapping to the 'senioridade' column, then display the value counts to verify the change.
"""

senioridade_map = {
    'SE': 'Senior',
    'MI': 'Pleno',
    'EN': 'Junior',
    'EX': 'Executivo'
}

df['nivel_experiencia'] = df['nivel_experiencia'].map(senioridade_map)

df['nivel_experiencia'].value_counts()

"""## Traduzir categorias de 'contrato'

### Subtask:
Mapear as abreviações da coluna 'contrato' para os termos em português (Tempo Integral, Contrato, Tempo Parcial, Freelancer).

**Reasoning**:
Map the abbreviations in the 'tipo_emprego' column to their Portuguese equivalents as specified in the instructions and then display the value counts to confirm the mapping.
"""

contrato_map = {
    'FT': 'Tempo Integral',
    'CT': 'Contrato',
    'PT': 'Tempo Parcial',
    'FL': 'Freelancer'
}

df['tipo_emprego'] = df['tipo_emprego'].map(contrato_map)

df['tipo_emprego'].value_counts()

"""## Traduzir categorias de 'tamanho empresa'

### Subtask:
Mapear as abreviações da coluna 'tamanho_empresa' para os termos em português (Médio, Grande, Pequeno).

**Reasoning**:
Create a dictionary to map the company size abbreviations to Portuguese terms and apply the mapping to the 'tamanho_empresa' column, then display the value counts to verify.
"""

tamanho_empresa_map = {
    'M': 'Médio',
    'L': 'Grande',
    'S': 'Pequeno'
}

df['tamanho_empresa'] = df['tamanho_empresa'].map(tamanho_empresa_map)

df['tamanho_empresa'].value_counts()

"""## Traduzir categorias de 'remote ratio'

### Subtask:
Mapear os valores numéricos da coluna 'remote_ratio' para os termos em português (Presencial, Híbrido, Remoto).

**Reasoning**:
Create the mapping dictionary and apply it to the 'taxa_remoto' column, then display the value counts to verify the changes.
"""

remoto_map = {
    0: 'Presencial',
    50: 'Híbrido',
    100: 'Remoto'
}

df['taxa_remoto'] = df['taxa_remoto'].map(remoto_map)

df['taxa_remoto'].value_counts()

"""## Verificar as traduções

### Subtask:
Exibir o cabeçalho do DataFrame e a contagem de valores das colunas traduzidas para confirmar que as alterações foram aplicadas corretamente.

**Reasoning**:
Display the head of the dataframe and the value counts for the translated columns to verify the changes.
"""

display(df.head())

display(df['nivel_experiencia'].value_counts())
display(df['tipo_emprego'].value_counts())
display(df['tamanho_empresa'].value_counts())
display(df['taxa_remoto'].value_counts())

"""## Summary:

### Data Analysis Key Findings

*   The column names of the DataFrame were successfully translated from English to Portuguese, including 'work\_year' to 'ano\_trabalho', 'experience\_level' to 'nivel\_experiencia', 'employment\_type' to 'tipo\_emprego', 'job\_title' to 'cargo', 'salary' to 'salario', 'salary\_currency' to 'moeda\_salario', 'salary\_in\_usd' to 'salario\_em\_usd', 'employee\_residence' to 'residencia\_empregado', 'remote\_ratio' to 'taxa\_remoto', 'company\_location' to 'localizacao\_empresa', and 'company\_size' to 'tamanho\_empresa'.
*   The categories within the 'nivel\_experiencia' column were successfully translated from abbreviations ('SE', 'MI', 'EN', 'EX') to Portuguese terms ('Senior', 'Pleno', 'Junior', 'Executivo').
*   The categories within the 'tipo\_emprego' column were successfully translated from abbreviations ('FT', 'CT', 'PT', 'FL') to Portuguese terms ('Tempo Integral', 'Contrato', 'Tempo Parcial', 'Freelancer').
*   The categories within the 'tamanho\_empresa' column were successfully translated from abbreviations ('M', 'L', 'S') to Portuguese terms ('Médio', 'Grande', 'Pequeno').
*   The numerical values within the 'taxa\_remoto' column were successfully mapped to Portuguese terms (0 to 'Presencial', 50 to 'Híbrido', and 100 to 'Remoto').

### Insights or Next Steps

*   The DataFrame is now ready for analysis using Portuguese column names and categorical values, which can facilitate understanding and reporting for a Portuguese-speaking audience.
*   Further analysis can now proceed, potentially focusing on exploring relationships between the translated categorical variables (like seniority, employment type, company size, and remote ratio) and salary or other factors.

"""

df.head()

df.describe(include='object')

df.describe()