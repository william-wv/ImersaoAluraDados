# -*- coding: utf-8 -*-
"""Aula 3 - Criando graficos e contando histórias

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1srXiNB7rTm-4wH7nXbhC5cKuVstdqZ-7
"""

print('Vou aprender python para dados');
idade = 21;
nome = "William"
print("Meu nome é " , nome , " tenho " , idade , " anos");

import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/guilhermeonrails/data-jobs/refs/heads/main/salaries.csv")

df.head(10)

df.info()

df.describe()

df.shape

df.isnull()

df.head()

df.isnull().sum()

df['work_year'].unique()

df[df.isnull().any(axis=1)]

"""preenchimento de dados

mean = media
median = mediana
"""

import numpy as np

# criando dataframe teste
df_salarios = pd.DataFrame({
    'nome' : ["William" , "Flavia" , "Cindy" , "Paulo" , "Joao"],
    'salario' : [4000 , np.nan , 5000 , np.nan , 100000]


})

# calcula as medias e substitui os nulos pela media e arredonda o valor
df_salarios['salario_media'] = df_salarios['salario'].fillna(df_salarios['salario'].mean().round(2))


'''
Calcula a mediana e substitui os nulos pela mediana
'''
df_salarios['salario_mediana'] = df_salarios['salario'].fillna(df_salarios['salario'].median())

df_salarios

df_temp = pd.DataFrame({
    'dia' : ['Segunda' , 'Terça', 'Quarta' , 'Quinta' , 'Sexta'],
    'temps' : [30 , np.nan , np.nan , 28 , 27]

})

df_temp['preenchido_ffill'] = df_temp['temps'].ffill()

df_temp

df_temp = pd.DataFrame({
    'dia' : ['Segunda' , 'Terça', 'Quarta' , 'Quinta' , 'Sexta'],
    'temps' : [30 , np.nan , np.nan , 28 , 27]

})

df_temp['preenchido_bfill'] = df_temp['temps'].bfill()

df_temp

df_cidades = pd.DataFrame({
        'nome' : ["William" , "Flavia" , "Cindy" , "Joao"],
        'cidades' : [ 'Guaarapuava' , 'Irati' , np.nan , 'Balneario Camboriu' ]

})

df_cidades['cidade_preenchida'] = df_cidades['cidades'].fillna('não informado')

df_cidades

"""excluindo"""

df_limpo = df.dropna()
df_limpo.isnull().sum()
df_limpo.head()

df_limpo.info()

df_limpo = df_limpo.assign(ano_trabalho = df_limpo['work_year'].astype('int64'))

"""#################### aula 3 ################"""

df_limpo['experience_level'].value_counts().plot(kind='bar', title='Distribuição de senioridade')

df_limpo.head()

import seaborn as sns

sns.barplot(x='experience_level', y='salary_in_usd', data=df_limpo)

import matplotlib.pyplot as plt

plt.figure(figsize=(8,5))
sns.barplot(x='experience_level', y='salary_in_usd', data=df_limpo)
plt.title('Distribuição de senioridade')
plt.xlabel('Senioridade')
plt.ylabel('Salário Anual em USD')



plt.show()

ordenação = df_limpo.groupby('experience_level')['salary_in_usd'].mean().sort_values(ascending=False)

ordem = df_limpo.groupby('experience_level')['salary_in_usd'].mean().sort_values(ascending=False).index
ordem

plt.figure(figsize=(8,5))
sns.barplot(x='experience_level', y='salary_in_usd', data=df_limpo , order=ordem)
plt.title('Distribuição de senioridade')
plt.xlabel('Senioridade')
plt.ylabel('Salário Anual em USD')



plt.show()

plt.figure(figsize=(10,8))
#bins = intervalo entre as barras
#kde = linha do grafico
sns.histplot(df_limpo['salary_in_usd'], bins=70, kde=True)
plt.title('Distribuição de Salários')
plt.xlabel('Salário Anual em USD')
plt.ylabel('Frequência')

plt.show()

plt.figure(figsize=(8,5))
sns.boxplot(x=df_limpo['salary_in_usd'])
plt.title('Distribuição de senioridade')
plt.xlabel('Senioridade')



plt.show()

### pontinhos é dados fora do plano

ordem_senior = ['EX' , 'SE' , 'MI' , 'EN']

plt.figure(figsize=(8,5))
sns.boxplot(x='experience_level', y='salary_in_usd' , data=df_limpo , order=ordem_senior)

plt.title('boxplot da distribuição de salario')
plt.xlabel('Sálario em USD')

plt.show()

df_limpo.head()

ordem_senior = ['EX' , 'SE' , 'MI' , 'EN']

plt.figure(figsize=(8,5))
sns.boxplot(x='experience_level', y='salary_in_usd' , data=df_limpo , order=ordem_senior, palette='Set2', hue='experience_level')

plt.title('boxplot da distribuição de salario')
plt.xlabel('Sálario em USD')

plt.show()

import plotly.express as px



import plotly.express as px

df_agg = df_limpo.groupby('experience_level')['salary_in_usd'].mean().reset_index()

fig = px.bar(df_agg,
             x='experience_level',
             y='salary_in_usd',
             title='Média Salarial por Nível de Experiência',
             labels={'experience_level': 'Nível de Experiência', 'salary_in_usd': 'Média Salarial em USD'})

fig.show()

df_limpo.rename(columns={
    'ano1': 'ano',
    'experience_level	': 'senioridade',
    'employment_type': 'contrato',
    'job_title': 'cargo',
    'salary': 'salario',
    'salary_currency': 'moeda',
    'salary_in_usd': 'usd',
    'employee_residence': 'residencia',
    'remote_ratio': 'remoto',
    'company_location': 'empresa',
    'company_size': 'tamanho_empresa',
    'ano': 'ano_trabalho'
}, inplace=True)

df_limpo.head()

remoto_contagem = df_limpo['remoto'].value_counts().reset_index()
remoto_contagem.columns = ['tipo_trabalho' , 'quantidade']

fig = px.pie(remoto_contagem,
             values='quantidade',
             names='tipo_trabalho',
             title='Proporção de Tipo de Trabalho',
             hole=0.5
)

fig.update_traces(textposition='inside', textinfo='percent+label')
fig.show()



remoto_contagem = df_limpo['remoto'].value_counts().reset_index()
remoto_contagem.columns = ['tipo_trabalho' , 'quantidade']

fig = px.pie(remoto_contagem,
             values='quantidade',
             names='tipo_trabalho',
             title='Proporção de Tipo de Trabalho',
)
fig.show()